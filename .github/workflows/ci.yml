name: ci
on:
  push:
  pull_request:
    types: [opened, reopened]
env:
  PRODUCTION_BRANCH: refs/heads/production
  STAGING_BRANCH: refs/heads/staging
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - run: npx lockfile-lint --type npm --path package-lock.json --validate-https --allowed-hosts npm
      - run: npm run lint
  test:
    name: Test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - run: npm test
  gatekeep:
    name: Determine if Build & Deploy is needed
    outputs:
      proceed: ${{ steps.determine_proceed.outputs.proceed }}
    runs-on: ubuntu-18.04
    if: github.event_name == 'push'
    steps:
      - id: determine_proceed
        run: |
          if [[ $GITHUB_REF == $STAGING_BRANCH ]]; then
            echo '::set-output name=proceed::true';
          elif [[ $GITHUB_REF == $PRODUCTION_BRANCH ]]; then
            echo '::set-output name=proceed::false';
            echo NODE_ENV=production >> $GITHUB_ENV;
          else
            echo '::set-output name=proceed::false';
          fi
      
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-18.04
    needs: [test, lint, gatekeep]
    if: needs.gatekeep.outputs.proceed == 'true'
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
      - run: npm run build
      - run: |
          if [[ $GITHUB_REF == $STAGING_BRANCH ]]; then
            echo NODE_ENV=staging >> $GITHUB_ENV;
            echo VPC_SUBNET=${{ secrets.VPC_SUBNET_STAGING }} >> $GITHUB_ENV;
            echo VPC_SECURITY_GROUP=${{ secrets.VPC_SECURITY_GROUP_STAGING }} >> $GITHUB_ENV;
            echo DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }} >> $GITHUB_ENV;
            echo SESSION_SECRET=${{ secrets.SESSION_SECRET_STAGING }} >> $GITHUB_ENV;
            echo OTP_SECRET=${{ secrets.OTP_SECRET_STAGING }} >> $GITHUB_ENV;
          elif [[ $GITHUB_REF == $PRODUCTION_BRANCH ]]; then
            echo NODE_ENV=production >> $GITHUB_ENV;
          fi
      - name: serverless deploy
        uses: opengovsg/serverless-github-action@v2.1.0
        with:
          args: -c "serverless plugin install --name serverless-plugin-custom-binary && serverless deploy --conceal"
          entrypoint: /bin/bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          NODE_ENV: ${{ env.NODE_ENV }}
          VPC_SUBNET: ${{ env.VPC_SUBNET }}
          VPC_SECURITY_GROUP: ${{ env.VPC_SECURITY_GROUP }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          SESSION_SECRET: ${{ env.SESSION_SECRET }}
          OTP_SECRET: ${{ env.OTP_SECRET }}
